// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/nicobellanich/migroblogging-platform/internal/domain"
)

// MockIUserServices is a mock of IUserServices interface.
type MockIUserServices struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServicesMockRecorder
}

// MockIUserServicesMockRecorder is the mock recorder for MockIUserServices.
type MockIUserServicesMockRecorder struct {
	mock *MockIUserServices
}

// NewMockIUserServices creates a new mock instance.
func NewMockIUserServices(ctrl *gomock.Controller) *MockIUserServices {
	mock := &MockIUserServices{ctrl: ctrl}
	mock.recorder = &MockIUserServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserServices) EXPECT() *MockIUserServicesMockRecorder {
	return m.recorder
}

// AddFollowing mocks base method.
func (m *MockIUserServices) AddFollowing(userName, newFollowing string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFollowing", userName, newFollowing)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFollowing indicates an expected call of AddFollowing.
func (mr *MockIUserServicesMockRecorder) AddFollowing(userName, newFollowing interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFollowing", reflect.TypeOf((*MockIUserServices)(nil).AddFollowing), userName, newFollowing)
}

// AddPublication mocks base method.
func (m *MockIUserServices) AddPublication(userName, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPublication", userName, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPublication indicates an expected call of AddPublication.
func (mr *MockIUserServicesMockRecorder) AddPublication(userName, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPublication", reflect.TypeOf((*MockIUserServices)(nil).AddPublication), userName, content)
}

// AddUser mocks base method.
func (m *MockIUserServices) AddUser(userName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", userName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockIUserServicesMockRecorder) AddUser(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockIUserServices)(nil).AddUser), userName)
}

// GetUser mocks base method.
func (m *MockIUserServices) GetUser(userName string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userName)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserServicesMockRecorder) GetUser(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserServices)(nil).GetUser), userName)
}

// UpdateUser mocks base method.
func (m *MockIUserServices) UpdateUser(userName string, newUser *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", userName, newUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserServicesMockRecorder) UpdateUser(userName, newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserServices)(nil).UpdateUser), userName, newUser)
}
